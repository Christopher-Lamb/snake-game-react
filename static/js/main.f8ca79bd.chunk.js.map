{"version":3,"sources":["components/Apple/index.js","components/SnakeBody/index.js","components/SnakeHead/index.js","components/GameScreen/index.js","App.js","index.js"],"names":["Apple","x","y","className","style","top","left","SnakeBody","coords","yCoord","xCoord","useKey","key","cb","callbackRef","useRef","useEffect","current","handle","event","code","document","addEventListener","removeEventListener","SnakeHead","bodyLength","start","snakeInfo","xCoordinate","yCoordinate","prevPositionsRef","useState","stop","setStop","setLeft","up","setUp","right","setRight","down","setDown","interval","setInterval","clearInterval","i","length","console","log","id","color","map","GameScreen","stopGame","startGame","setStart","snakePositions","setSnakePositions","getRandCoord","Math","floor","random","positions","App","renderGameOver","setRenderGameOver","renderGame","setRenderGame","score","setScore","onClick","getElementById","classList","remove","add","gameOver","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f8ca79bd.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"./Apple.css\";\r\n\r\nfunction Apple({ x, y }) {\r\n  return (\r\n    <div className=\"apple\" style={{ top: `${y}px`, left: `${x}px` }}></div>\r\n  );\r\n}\r\n\r\nexport default Apple;\r\n","import React from \"react\";\r\nimport \"./SnakeBody.css\";\r\n\r\nfunction SnakeBody({ coords}) {\r\n  return (\r\n    <div\r\n      className=\"snake-body\"\r\n      style={{\r\n        top: `${coords.yCoord}px`,\r\n        left: `${coords.xCoord}px`,\r\n      }}\r\n    ></div>\r\n  );\r\n}\r\n\r\nexport default SnakeBody;\r\n","import React from \"react\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport SnakeBody from \"../SnakeBody\";\r\nimport Apple from \"../Apple\";\r\n\r\nimport \"./SnakeHead.css\";\r\n\r\nfunction SnakeHead({ bodyLength, start, snakeInfo }) {\r\n  // Call our hook for each key that we'd like to monitor\r\n  const xCoordinate = useRef(1);\r\n  const yCoordinate = useRef(1);\r\n  const prevPositionsRef = useRef([{ xCoord: 1, yCoord: 1 }]);\r\n  const [stop, setStop] = useState(false);\r\n\r\n  const [left, setLeft] = useState(false);\r\n  const [up, setUp] = useState(false);\r\n  const [right, setRight] = useState(false);\r\n  const [down, setDown] = useState(false);\r\n\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  useEffect(() => {\r\n    //init positions\r\n    snakeInfo(prevPositionsRef.current, stop);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    //init positions\r\n    snakeInfo(prevPositionsRef.current, stop);\r\n  }, [stop]);\r\n\r\n  useEffect(() => {\r\n    if (start) {\r\n      //Wall Barriers\r\n      const interval = setInterval(() => {\r\n        // console.log(start);\r\n        // console.log(\"HEy\");\r\n\r\n        //If snake Crosses Border Stop Him\r\n        if (xCoordinate.current <= 0 || xCoordinate.current >= 450) {\r\n          clearInterval(interval);\r\n          setStop(true);\r\n        }\r\n        if (yCoordinate.current <= 0 || yCoordinate.current >= 450) {\r\n          clearInterval(interval);\r\n          setStop(true);\r\n          start = false;\r\n        }\r\n\r\n        //If snake Hits its own body Stop Him\r\n\r\n        for (let i = 1; i < prevPositionsRef.current.length; i++) {\r\n          if (\r\n            prevPositionsRef.current[i].xCoord === xCoordinate.current &&\r\n            prevPositionsRef.current[i].yCoord === yCoordinate.current\r\n          ) {\r\n            setStop(true);\r\n            clearInterval(interval);\r\n          }\r\n        }\r\n\r\n        //Export Positions\r\n        snakeInfo(prevPositionsRef.current, stop);\r\n\r\n        if (left) {\r\n          xCoordinate.current = xCoordinate.current - 15;\r\n        } else if (right) {\r\n          xCoordinate.current = xCoordinate.current + 15;\r\n        } else if (up) {\r\n          yCoordinate.current = yCoordinate.current - 15;\r\n        } else if (down) {\r\n          yCoordinate.current = yCoordinate.current + 15;\r\n        } else {\r\n          console.log(\"hit the else block\");\r\n        }\r\n\r\n        prevPositionsRef.current = [\r\n          {\r\n            xCoord: xCoordinate.current,\r\n            yCoord: yCoordinate.current,\r\n          },\r\n          ...prevPositionsRef.current,\r\n        ];\r\n        if (prevPositionsRef.current.length > bodyLength) {\r\n          prevPositionsRef.current.length = bodyLength;\r\n        }\r\n      }, 65);\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [up, down, left, right]);\r\n\r\n  //Handle Moving Snake Head Left\r\n  const directionLeft = () => {\r\n    if (stop) {\r\n      return;\r\n    }\r\n    if (!right && start) {\r\n      setLeft(true);\r\n      setRight(false);\r\n      setUp(false);\r\n      setDown(false);\r\n    }\r\n  };\r\n\r\n  //Handle Moving Snake Head Right\r\n  const directionRight = () => {\r\n    if (stop) {\r\n      return;\r\n    }\r\n    if (!left && start) {\r\n      setLeft(false);\r\n      setRight(true);\r\n      setUp(false);\r\n      setDown(false);\r\n    }\r\n  };\r\n  //Handle Moving Snake Head Right\r\n  const directionUp = () => {\r\n    if (stop) {\r\n      return;\r\n    }\r\n    if (!down && start) {\r\n      setLeft(false);\r\n      setRight(false);\r\n      setUp(true);\r\n      setDown(false);\r\n    }\r\n  };\r\n\r\n  //Handle Moving Snake Head Right\r\n  const directionDown = () => {\r\n    if (stop) {\r\n      return;\r\n    }\r\n    if (!up && start) {\r\n      setLeft(false);\r\n      setRight(false);\r\n      setUp(false);\r\n      setDown(true);\r\n    }\r\n  };\r\n\r\n  //Use useKey hook to track user key presses\r\n\r\n  useKey(\"KeyA\", directionLeft);\r\n  useKey(\"KeyW\", directionUp);\r\n  useKey(\"KeyD\", directionRight);\r\n  useKey(\"KeyS\", directionDown);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        id=\"snake-head\"\r\n        style={{\r\n          top: `${yCoordinate.current}px`,\r\n          left: `${xCoordinate.current}px`,\r\n        }}\r\n      >\r\n        <h1 style={{ color: \"white\" }}></h1>\r\n      </div>\r\n      {prevPositionsRef.current.map((coords, i) => {\r\n        return <SnakeBody key={i} coords={coords} />;\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\n//Hook for key and Callback Function\r\nfunction useKey(key, cb) {\r\n  //Init Ref for callback\r\n  const callbackRef = useRef(cb);\r\n  //Tracks the current Callback\r\n  useEffect(() => {\r\n    callbackRef.current = cb;\r\n  });\r\n\r\n  //Inits each handle with the current running function\r\n  useEffect(() => {\r\n    function handle(event) {\r\n      if (event.code === key) {\r\n        callbackRef.current(event);\r\n      }\r\n    }\r\n    //Adds then removes eventListener\r\n    document.addEventListener(\"keypress\", handle);\r\n    return () => document.removeEventListener(\"keypress\", handle);\r\n  }, [key]);\r\n}\r\n\r\nexport default SnakeHead;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport Apple from \"../Apple\";\r\nimport SnakeHead from \"../SnakeHead\";\r\n\r\nimport \"./GameScreen.css\";\r\n\r\nfunction GameScreen({ stopGame, startGame }) {\r\n  const [start, setStart] = useState(false);\r\n  const [snakeAlive, setSnakeAlive] = useState(true);\r\n\r\n  const [snakePositions, setSnakePositions] = useState();\r\n  const bodyLength = useRef(1);\r\n  const getRandCoord = () => {\r\n    let num = 15 * Math.floor(Math.random() * 29 + 1) + 1;\r\n    return num;\r\n  };\r\n  const x = useRef(getRandCoord());\r\n  const y = useRef(getRandCoord());\r\n\r\n  useEffect(() => {\r\n    setStart(startGame);\r\n\r\n    if (start) {\r\n      const interval = setInterval(() => {\r\n        //If snake head occupies Apple's Space spawn new apple increase body length\r\n        if (\r\n          snakePositions[0].xCoord === x.current &&\r\n          snakePositions[0].yCoord === y.current\r\n        ) {\r\n          x.current = getRandCoord();\r\n          y.current = getRandCoord();\r\n          bodyLength.current = bodyLength.current + 1;\r\n        }\r\n\r\n        //If Apple tries to spawn on a Snake body randomized Coordinates of Apple\r\n        for (let i = 1; i < snakePositions.length; i++) {\r\n          if (\r\n            snakePositions[i].xCoord === x.current &&\r\n            snakePositions[i].yCoord === y.current\r\n          ) {\r\n            x.current = getRandCoord();\r\n            y.current = getRandCoord();\r\n          }\r\n        }\r\n      }, 50);\r\n      return () => clearInterval(interval);\r\n    }\r\n  });\r\n\r\n  const setSnakeInfo = (positions, stop) => {\r\n    setSnakePositions(positions);\r\n    if (stop) {\r\n      stopGame(true, bodyLength.current - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div id=\"game-screen\">\r\n      <h1 id=\"score-count\">Score: {bodyLength.current - 1}</h1>\r\n\r\n      <SnakeHead\r\n        bodyLength={bodyLength.current}\r\n        start={start}\r\n        snakeInfo={setSnakeInfo}\r\n      />\r\n\r\n      <Apple x={x.current} y={y.current} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameScreen;\r\n","import React, { useEffect, useState } from \"react\";\nimport GameScreen from \"./components/GameScreen\";\nimport \"./App.css\";\n\nfunction App() {\n  const [renderGameOver, setRenderGameOver] = useState(false);\n  const [renderGame, setRenderGame] = useState(true);\n  const [score, setScore] = useState();\n  const [start, setStart] = useState(false);\n\n  const onStart = () => {\n    const startBtn = document.getElementById(\"start-btn\");\n    startBtn.classList.add(\"start-btn-hidden\");\n    setStart(true);\n  };\n\n  const onPlayAgain = () => {\n    const startBtn = document.getElementById(\"start-btn\");\n    startBtn.classList.remove(\"start-btn-hidden\");\n    setRenderGameOver(false);\n    setRenderGame(true);\n  };\n  const displayGameOver = (gameOver, score) => {\n    if (gameOver) {\n      console.log(`GAme OVer ${score} `);\n      setRenderGameOver(true);\n      setScore(score);\n      setRenderGame(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {renderGameOver ? (\n        <div id=\"game-over-display\">\n          <h1>Game over</h1>\n          <h2>Your final score was {score}</h2>\n          <button id=\"play-again-btn\" onClick={onPlayAgain}>\n            Play Again\n          </button>\n        </div>\n      ) : null}\n      <button id=\"start-btn\" className=\"start-btn \" onClick={onStart}>\n        Start\n      </button>\n\n      {renderGame ? (\n        <GameScreen stopGame={displayGameOver} startGame={start} />\n      ) : null}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}